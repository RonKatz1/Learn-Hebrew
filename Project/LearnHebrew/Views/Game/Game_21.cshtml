@model LearnHebrew.Models.GameInformationModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>


<style>

    body {
        background-image: url('../../Pictures/Game_21/woodwall1.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: 100% 100%;
        background-attachment: fixed;
    }

    section {
        position: relative;
        width: 95%;
        height: 75%;
        margin: auto;
        cursor: none;
    }
    footer {
        /*position: absolute;*/
        bottom: 0;
        font-weight: bold;
        width: 100%
    }
    .fireball {
        position: absolute;
        width: 2%;
        height: 2%;
    }

    .enemy {
        width: 6%;
        height: 6%;
        position: absolute;
    }

    #endGameScreen {
        height: 50%;
    }

    .hidescreen {
        display: none;
    }

    #imageId {
        width: 100px;
        height: 100px;
    }

    .heart {
        opacity: 0.7;
        width: 25px;
    }

    #heartDiv {
        position: absolute;
        right: 0;
        top: 0;
        float: right;
        text-align: right;
    }

    #scoreId {
        margin-left: 15px;
        font-size: x-large;
        color: darkred;
    }
    .myButton {
        box-shadow: inset 0px 1px 0px 0px #f9eca0;
        background: linear-gradient(to bottom, #f0c911 5%, #f2ab1e 100%);
        background-color: #f0c911;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: #c92200;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }

    #instructionId {
        cursor: pointer;
        color: goldenrod;
        margin-bottom: 5px;
        font-size: 30px;
    }

    #gameOverh {
        color: gold;
        margin-top: 30px;
        margin-bottom: 30px;
        font-size: 60px;
    }

    .gameOverBtn {
        margin-top: 10px;
        outline: none;
    }
    #silenceDiv {
        text-align: center;
    }

    #silenceBtn {
        margin: 15px;
        border-radius: 30px;
        font-size: 20px;
        cursor: pointer;
        background-color: transparent;
        outline: none;
    }

    .arrow {
        height: 30px;
        position: absolute;
    }

    #arrowDiv {
        position: relative;
    }
</style>
<script>
    let currentMousePos = { x: -1, y: -1 }; //axis X and Y for last location of mouse in the game section
    let validLetters = [];// array of valid src of letter images per the user choosing before picking this game
    let invalidLetters = [];// array of invalid src of letter images per the user choosing before picking this game
    let timeout;//interval for fireball creation
    let gameoverIndicator; //interval for spawning enemies until game is over
    let spawnTimer = 2000;// time it takes for a letter to remove itself
    let enemySpawn = 1000;// spawn timer of new letters
    let lives = 5; //number of times a user can die in the game
    let gameStarted = false; //indicator for game started for not letting pressed enter
    let arrowInterval;// the interval variable of the arrow animation

    $(document).ready(function () {
        LoadGameInstruction();
        FillLetters();
        LoadSoundAndPicture();
        windowResize();
        SetArrows();
        arrowInterval = setInterval(MoveArrows, 1000);
        $("body").keydown(userKey_Options);

        $('#sectionId').mouseout(function () {
            //clearInterval(timeout);
            return false;
        });

        $('#sectionId').mousemove(function () {
            currentMousePos.x = event.pageX - $(this).offset().left;
            currentMousePos.y = event.pageY - $(this).offset().top;
            CreateFireBall();
        });
    })
    // This function pre loads the game instructions
    function LoadGameInstruction() {
        let obj = document.createElement("audio");
        obj.src = "/Audio/Game_21/Game_21_instructions.mp4";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#instructionId").click(function () {
            obj.play();
        });
    }
    // This function resizes objects of the game according to the current size of the screen
    function windowResize() {
        $(window).resize(function () {
            $("#leftArrow").stop();
            $("#rightArrow").stop();
            $("#leftArrow").addClass("hidescreen");
            $("#rightArrow").addClass("hidescreen");
            setTimeout(
                function () {
                    $("#leftArrow").removeClass("hidescreen");
                    $("#rightArrow").removeClass("hidescreen");
                }, 2100);
            SetArrows();
        })
    }
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {
                for (let i = 0; i < 5; i++)
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);
                for (let j = 0; j < data.InValidLetterName.length; j++)
                    invalidLetters.push("/Pictures/Alphabet/" + data.InValidLetterName[j]);
            }
        });
    }
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (13):// enter was pressed
                if (!gameStarted) {
                    StartGame();
                    gameStarted = true;
                }
                break;
        }
    }

    function StartGame() {
        gameStarted = true;
        RemoveArrows();
        $("#buttonId").addClass("hidescreen");
        $("#buttonRet").removeClass("hidescreen");
        FillHearts();
        gameoverIndicator = setInterval(createEnemy, enemySpawn);
    }
    // This function places the heart images in the game
    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_12/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);

        }
    }
    // This finction creates the fireball images in the game and places them at the location of the mouse
    function CreateFireBall() {
        let $fireBall = $("<img>");
        $fireBall.attr("src", "/Pictures/Game_21/fireball.png");
        $fireBall.addClass("fireball");

        $fireBall.css("top", currentMousePos.y + "px");
        $fireBall.css("left", currentMousePos.x + "px");
        $("#sectionId").append($fireBall);

        $fireBall.animate({
            opacity: 0.4

        }, {
                duration: 200,
                easing: "linear",
                complete: deleteObject

            });
    }
    function createEnemy() {

        let $enemy = $("<img>");
        let enemyType = Math.floor((Math.random() * 10) + 1);

        if (enemyType >= 1 && enemyType <= 7) {
            let randomNumber = Math.floor((Math.random() * validLetters.length) + 0);
            $enemy.attr("src", validLetters[randomNumber]);

        }

        else {
            let randomNumber = Math.floor((Math.random() * invalidLetters.length) + 0);
            $enemy.attr("src", invalidLetters[randomNumber]);

        }
        $enemy.addClass("enemy");

        let axisY = parseInt($("section").css("height")) - parseInt($enemy.css("height"))-30;
        let limitLeft = 0;
        let limitRight = parseInt($("#sectionId").css("width")) - parseInt($enemy.css("width"));
        let axisX = Math.floor((Math.random() * limitRight) + limitLeft);
        $enemy.css("top", axisY + "px");
        $enemy.css("left", axisX + "px");

        $("#sectionId").append($enemy);
        let randomXupper = Math.floor((Math.random() * limitRight) + limitLeft);

        $enemy.animate({
            top: (parseInt($("section").css("top")))  + "px",
            left: randomXupper

        }, {
                duration: spawnTimer,
                easing: "swing",
                progress: collisionCheck,

            });
        randomXupper = Math.floor((Math.random() * limitRight) + limitLeft);
        $enemy.delay(10).animate({
            left: randomXupper,
            top: (parseInt($("section").css("height"))) - (parseInt($enemy.css("height"))) + "px"

        }, {
                duration: spawnTimer,
                easing: "swing",
                progress: collisionCheck,
                complete: deleteObject

            });

    }
    function collisionCheck() {
        let $enemy = $(this);//getting the current enemy

        $(".fireball").each(function () {
            let $fireball = $(this);
            if (checkIntersection($fireball, $enemy)) {
                enemyDestroyed($enemy);
            }
        });
    }

    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    // This function makes the game harder
    function MoreChallenge() {
        clearInterval(gameoverIndicator);
        let timeSpawnTimer = Math.floor(spawnTimer / 5);
        let timeEnemySpawn = Math.floor(enemySpawn / 5);
        spawnTimer = spawnTimer - timeSpawnTimer;
        enemySpawn = enemySpawn - timeEnemySpawn
        gameoverIndicator = setInterval(createEnemy, enemySpawn);

    }
    function enemyDestroyed($enemy) {
        let indicator = false;
        for (let i = 0; i < validLetters.length; i++) {
            if ($enemy.attr('src') == validLetters[i]) {
                $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
                if (parseInt($("#scoreId").text()) == 10 || parseInt($("#scoreId").text()) == 20)
                    MoreChallenge();
                indicator = true;
                CreateSound(1);
                let $dropper = $("<img>");
                $dropper.addClass("enemy");
                $dropper.attr("src", $enemy.attr("src"));
                $dropper.css("left", $enemy.css("left"));
                $dropper.css("top", $enemy.css("top"));
                $("#sectionId").append($dropper);

                $dropper.animate({
                    top: (parseInt($("section").css("height"))) - (parseInt($enemy.css("height"))) + "px"

                }, {
                        step: function (now, fx) {
                            $(this).css('transform', 'rotate(' + now + 'deg)');
                        },
                        duration: spawnTimer,
                        easing: "linear",
                        complete: deleteObject

                    });
                $enemy.finish();
                break;
            }
        }
        if (!indicator) {
            lives--;
            CreateSound(2);
            RemoveHeart();
            let $error = $("<img>");
            $error.addClass("enemy");
            $error.attr("src", "/Pictures/Game_21/error.png");
            $error.css("left", $enemy.css("left"));
            $error.css("top", $enemy.css("top"));
            $("#sectionId").append($error);

            $error.animate({
                opacity: 0.4

            }, {

                    duration: spawnTimer,
                    easing: "linear",
                    complete: deleteObject

                });
            $enemy.finish();

        }
        if (lives == '0') {
            GameOver();
        }
    }
    // This function removes the heart images and calls for the recreation of them 
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_21/doh.mp3").load();
        new Audio("/Audio/Game_21/slash.mp3").load();
        for (let i = 0; i < validLetters.length; i++) {
            fetch(validLetters[i]);
        }
        for (let j = 0; j < invalidLetters.length; j++) {
            fetch(invalidLetters[j]);
        }
    }
    function CreateSound(number) {
        if ($("#silenceBtn").val() == "🔔") {
            let $sound;
            if (number == 1) {
                $sound = new Audio("/Audio/Game_21/slash.mp3");
            }
            else {
                $sound = new Audio("/Audio/Game_21/doh.mp3");
            }
            $sound.play();
        }         
    }
    function GameOver() {
        clearInterval(gameoverIndicator);
        $("#silenceBtn").remove();
        $("footer").css("position", "absolute");
        $("#sectionId").addClass("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
    }
    function deleteObject() {
        $(this).remove();
    }
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
    // This function changes the slience button's appearance
    function ChangeSilenceBtn() {
        if ($("#silenceBtn").val() == "🔔") {
            $("#silenceBtn").val("🔕");
        }
        else {
            $("#silenceBtn").val("🔔");
        }
        $("#silenceBtn").blur();
    }
    // This function sets the location of the image arrows
    function SetArrows() {
        let x = $("#instructionId").position();
        x = x.left - $("#leftArrow").width() - $("#instructionId").width();
        let x2 = $("#instructionId").position();
        x2 = x2.left + ($("#instructionId").width() * 2);
        $("#leftArrow").css("left", x + "px");
        $("#rightArrow").css("left", x2 + "px");
    }
    // This function enables the movement of the image arrows
    function MoveArrows() {
        let $leftArrow = $("#leftArrow");
        let left = $("#instructionId").width();
        let leftTarget = parseInt($leftArrow.css("left")) + left;
        $leftArrow.animate({

            left: leftTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
        let $rightArrow = $("#rightArrow");
        let right = $("#instructionId").width();
        let rightTarget = parseInt($rightArrow.css("left")) - right;
        $rightArrow.animate({

            left: rightTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
    }
    // This function stops the arrow animations and removes the arrows
    function RemoveArrows() {
        clearInterval(arrowInterval);
        $("#leftArrow").remove();
        $("#rightArrow").remove();
    }
</script>

<body>
    <div style="text-align:center">
        <h1 style="color:gold"> נינג'ה אותיות </h1>
        <h2 style="color:gold"> עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה או אנטר</h2>
        <div id="arrowDiv">
            <img id="leftArrow" class="arrow" src="~/Pictures/Game_20/arrowLeft.png" />
            <i id="instructionId" class="fa fa-volume-up"></i>
            <img id="rightArrow" class="arrow" src="~/Pictures/Game_20/arrowRight.png" />
        </div>
        <input class="myButton" id="buttonId" type="button" value="התחלה" onclick="StartGame()" />
        <input class="myButton" id="buttonRet" type="button" value="חזור לאותיות" onclick="GoToAlphabet()" />
        <h2 style="color:gold"><b>  אות משחק זה היא @Model.Letter </b></h2>
        <div id="silenceDiv">
            <input id="silenceBtn" type="button" value="🔔" onclick="ChangeSilenceBtn()" />
        </div>
    </div>
    <section id="sectionId" class="w3-display-container	">
        <div id="heartDiv"></div>
        <div id="scoreDiv" class="w3-display-topleft"><p id="scoreId">0</p></div>
    </section>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h3 id="gameOverh">ניקוד<b>: <span id="finalScore"></span></b></h3>
        <input class="gameOverBtn, myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
    </div>
    <footer style="text-align:center;font-size:x-small;display:block"><p>Ⓒ 2020 Learn-Hebrew</p></footer>

</body>