@model LearnHebrew.Models.GameInformationModel
@{
    Layout = null;
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style>
    body {
        background-image: url('../../Pictures/Game_20/clouds_background.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    section {
        position: relative;
        margin: auto;
        border: 1px solid black;
        background-color: deepskyblue;
    }

    footer {
        position: absolute;
        bottom: 0;
        width: 100%
    }
    .cloud {
        position: absolute;
        z-index: 2;
    }

    .heart {
        opacity: 0.7;
        width: 25px;
    }

    #heartDiv {
        position: absolute;
        right: 0;
        top: 0;
        float: right;
        text-align: right;
        z-index: 3;
    }

    #scoreId {
        margin-left: 15px;
        font-size: x-large;
        color: gold;
    }

    .hidescreen {
        display: none;
    }

    #birdId {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .pipe {
        position: absolute;
        width: 50px;
        height: 200px;
        z-index: 1;
    }

    .letter {
        position: absolute;
        width: 25px;
        height: 25px;
    }

    .myButton {
        box-shadow: inset 0px 1px 0px 0px #f9eca0;
        background: linear-gradient(to bottom, #f0c911 5%, #f2ab1e 100%);
        background-color: #f0c911;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: #c92200;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }

    #instructionId {
        cursor: pointer;
        color: goldenrod;
        margin-bottom: 5px;
        font-size: 30px;
    }

    #gameOverh {
        color: gold;
        margin-top: 30px;
        margin-bottom: 30px;
        font-size:60px;
    }

    .gameOverBtn {
        margin-top: 10px;
        outline: none;
    }
    #silenceDiv {
        text-align: center;
    }

    #silenceBtn {
        margin: 15px;
        border-radius: 30px;
        font-size: 20px;
        cursor: pointer;
        background-color: transparent;
        outline: none;
    }

    .arrow {
        height: 30px;
        position: absolute;
    }

    #arrowDiv {
        position: relative;
    }
</style>
<script>

    let validLetters = [];// array of valid src of letter images per the user choosing before picking this game
    let flappingBirdIndicator;// interval changing of flying bird
    let flappingSpeed = 200;// time it takes to change the src of the bird image
    let obstacleIndicator;// interval of obstacle spawning
    let obstacleSpawn = 2000;// time it takes to create a new obstacle in mili secomds
    let obstacleRunwayTimer = 2000;// time it takes to an obstacle to move and disappear
    let $bird; // variable for bird image
    let lives = 5;// the number of times a user can mess up before he losses the game
    let move = 25;// the movement size the bird can make going up or down
    let freeFall = 5;// falling distance per change of bird image
    let gameStarted = false; // indicator for game started for not letting pressed enter
    let arrowInterval;// the interval variable of the arrow animation

    $(document).ready(function () {
        //LoadGameInstruction();
        FillLetters();
        LoadSoundAndPicture();
        windowResize();
        SetArrows();
        arrowInterval = setInterval(MoveArrows, 1000);
        flappingBirdIndicator = setInterval(ChangeBird, flappingSpeed);

        $bird = $("#birdId");
        $bird.css("top", ($("#sectionId").height() / 2) - $bird.height());

        CreateClouds();
    })
    // This function resizes objects of the game according to the current size of the screen
    function windowResize() {
        $(window).resize(function () {
            $("#leftArrow").stop();
            $("#rightArrow").stop();
            $("#leftArrow").addClass("hidescreen");
            $("#rightArrow").addClass("hidescreen");
            setTimeout(
                function () {
                    $("#leftArrow").removeClass("hidescreen");
                    $("#rightArrow").removeClass("hidescreen");
                }, 2100);
            SetArrows();
        })
    }
    // This funcion pre loads the sound and pictures of the game
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_20/good_sound.mp3").load();
        new Audio("/Audio/Game_20/doh.mp3").load();
        for (let i = 0; i < validLetters.length; i++) {
            fetch(validLetters[i]);
        }
    }
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {
                for (let i = 0; i < 5; i++)
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);
            }
        });
    }
    // This function starts the game
    function StartGame() {
        gameStarted = true;
        RemoveArrows();
        $("#buttonId").addClass("hidescreen");
        $("#buttonRet").removeClass("hidescreen");
        FillHearts();
        $("body").keydown(userKey_Options);

        obstacleIndicator = setInterval(CreateObstacle, obstacleSpawn);

    }
    // This function creates the "cloud" images
    function CreateClouds() {
        let $cloudUp = $("<img>");
        $cloudUp.attr("src", "/Pictures/Game_20/cloud.png");
        $cloudUp.addClass("cloud");
        $cloudUp.css("top", 0 + "px");
        $cloudUp.css("left", 0 + "px");
        $cloudUp.css("width", parseInt($("#sectionId").width()) + "px");
        $cloudUp.css("height", 30 + "px");
        $("#sectionId").append($cloudUp);

        let $cloudDown = $("<img>");
        $cloudDown.attr("src", "/Pictures/Game_20/cloud.png");
        $cloudDown.addClass("cloud");
        $cloudDown.css("bottom", 0 + "px");
        $cloudDown.css("left", 0 + "px");
        $cloudDown.css("width", parseInt($("#sectionId").width()) + "px");
        $cloudDown.css("height", 30 + "px");
        $("#sectionId").append($cloudDown);

    }
    // This function enables the movement of the user and the start of the game
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (13):// enter was pressed
                if (!gameStarted) {
                    StartGame();
                    gameStarted = true;
                }
            case (38):// up key was pressed
                if (gameStarted) {
                    MoveBird(-1 * move);
                }
                break;
            case (40):// down key was pressed
                if (gameStarted) {
                    MoveBird(move);
                }
                break;

        }
    }
    // This function moves the bird user image
    function MoveBird(movement) {
        let currentPosition = parseInt($bird.css("top"));//getting current position of user
        let newPosition = currentPosition + movement;//calculating new position of user
        $bird.css("top", newPosition + "px");
        if (!(newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("height")) - parseInt($bird.css("height"))))) {
            lives--;
            CreateSound();
            if (lives > 0) {
                RemoveHeart();
                RestartGame();
            }
            else {
                GameOver();
            }

        }

    }
    // This function creates sound for the game
    function CreateSound(number) {
        if ($("#silenceBtn").val() == "🔔") {
            let $sound;
            if (number == 1) {
                $sound = new Audio("/Audio/Game_20/good_sound.mp3");
            }
            else {
                $sound = new Audio("/Audio/Game_20/doh.mp3");
            }
            $sound.play();
        }    
    }
    //This function changes the bird image src
    function ChangeBird() {
        switch ($bird.attr("src")) {
            case ("/Pictures/Game_20/bird1.png"):
                $bird.attr("src", "/Pictures/Game_20/bird2.png");
                break;
            case ("/Pictures/Game_20/bird2.png"):
                $bird.attr("src", "/Pictures/Game_20/bird1.png");
                break;
        }
        if (gameStarted)
            MoveBird(freeFall);
    }

    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_20/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);

        }
    }
    // This function makes the game harder
    function MoreChallenge() {
        clearInterval(obstacleIndicator);
        let timeObstacleSpawn = Math.floor(obstacleSpawn / 4);
        let timeObstacleRunwayTimer = Math.floor(obstacleRunwayTimer / 4);
        obstacleSpawn = obstacleSpawn - timeObstacleSpawn;
        obstacleRunwayTimer = obstacleRunwayTimer - timeObstacleRunwayTimer;
        obstacleIndicator = setInterval(CreateObstacle, obstacleSpawn);
    }
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }
    // This function resets the bird image 
    function RestartGame() {
        $bird.css("top", ($("#sectionId").height() / 2) - $bird.height());
    }
    // This function creates the "obstacle" images
    function CreateObstacle() {
        let axisX = parseInt($("#sectionId").css("width")) - parseInt($bird.css("width"));
        let originalHeight = 200;
        let birdH = parseInt($bird.css("height"));
        let randomHeight = Math.floor((Math.random() * 150) + 100);

        let $pipeUp = $("<img>");
        $pipeUp.attr("src", "/Pictures/Game_20/pipe1.png");
        $pipeUp.addClass("pipe");
        $pipeUp.css("bottom", 0 + "px");
        $pipeUp.css("left", axisX + "px");

        let $pipeDown = $("<img>");
        $pipeDown.attr("src", "/Pictures/Game_20/pipe2.png");
        $pipeDown.addClass("pipe");
        $pipeDown.css("top", 0 + "px");
        $pipeDown.css("left", axisX + "px");

        let $letter = $("<img>");
        let randomNumber = Math.floor((Math.random() * validLetters.length) + 0);
        $letter.attr("src", validLetters[randomNumber]);
        $letter.addClass("letter");
        $letter.css("left", axisX + "px");

        // the next line will always create the "hard mode" outcome, we will do this as an option in the future to create more game modes
        let dificulty = Math.floor((Math.random() * 2) + 2); 
        // currently "easy mode" will never be picked

        if (dificulty == 1) {//easy dificulty
            randomHeight = Math.floor((Math.random() * 3) + 1);
            $pipeUp.css("height", Math.floor(originalHeight / randomHeight) + "px");

            randomHeight = Math.floor((Math.random() * 3) + 1);
            $pipeDown.css("height", Math.floor(originalHeight / randomHeight) + "px");

            $("#sectionId").append($pipeUp);
            $("#sectionId").append($pipeDown);


            let randMiddle = Math.floor((Math.random() * ($pipeDown.height() - $letter.height())) + (parseInt($pipeDown.css("top")) + $pipeDown.height()));

            if ($pipeUp.height() == $pipeDown.height()) {//spawn case where letter top is dificult to predict randomly
                randMiddle = $pipeDown.height() + Math.floor(birdH / 2);
            }

            $letter.css("top", randMiddle + "px");
            $("#sectionId").append($letter);
        }
        else {//hard dificulty
            let totHeight = parseInt($("#sectionId").css("height")) - (birdH*2) - ($("#heartDiv").height()*2) ;

            let randomUpH = Math.floor((Math.random() * totHeight) + birdH);


            $pipeUp.css("height", randomUpH + "px");



            $pipeDown.css("height", (totHeight - $pipeUp.height() + birdH) + "px");

            let middle = $pipeDown.height() + Math.floor(birdH/2);
            $letter.css("top", middle + "px")

            $("#sectionId").append($letter);
            $("#sectionId").append($pipeUp);
            $("#sectionId").append($pipeDown);
        }

        $pipeUp.animate({
            left: 0

        }, {
                duration: obstacleRunwayTimer,
                easing: "linear",
                progress: collisionCheckPipe,
                complete: deleteObject

            });
        $pipeDown.animate({
            left: 0

        }, {
                duration: obstacleRunwayTimer,
                easing: "linear",
                progress: collisionCheckPipe,
                complete: deleteObject

            });
        $letter.animate({
            left: 0

        }, {
                duration: obstacleRunwayTimer,
                easing: "linear",
                progress: collisionCheckLetter,
                complete: deleteObject

            });




    }
    function collisionCheckPipe() {
        let $pipe = $(this);//getting the current pipe
        if (checkIntersection($bird, $pipe)) {
            lives--;
            CreateSound();
            $(".pipe").stop();
            $(".pipe").remove();
            $(".letter").stop();
            $(".letter").remove();
            if (lives > 0) {
                RemoveHeart();
                RestartGame();
            }
            else {
                GameOver();
            }
        }
    }
    function collisionCheckLetter() {
        let $letter = $(this);//getting the current letter
        if (checkIntersection($bird, $letter)) {
            $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
            CreateSound(1);
            if (parseInt($("#scoreId").text()) == 10 || parseInt($("#scoreId").text()) == 20 )
                MoreChallenge();
            $(".letter").stop();
            $(".letter").remove();

        }
    }
    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    function GameOver() {
        clearInterval(flappingBirdIndicator);
        clearInterval(obstacleIndicator);
        $("#silenceBtn").remove();
        $("#sectionId").addClass("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
    }
    function deleteObject() {
        $(this).remove();
    }
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
    // This function changes the slience button's appearance
    function ChangeSilenceBtn() {
        if ($("#silenceBtn").val() == "🔔") {
            $("#silenceBtn").val("🔕");
        }
        else {
            $("#silenceBtn").val("🔔");
        }
        $("#silenceBtn").blur();
    }
    // This function sets the location of the image arrows
    function SetArrows() {
        let x = $("#instructionId").position();
        x = x.left - $("#leftArrow").width() - $("#instructionId").width();
        let x2 = $("#instructionId").position();
        x2 = x2.left + ($("#instructionId").width() * 2);
        $("#leftArrow").css("left", x + "px");
        $("#rightArrow").css("left", x2 + "px");
    }
    // This function enables the movement of the image arrows
    function MoveArrows() {
        let $leftArrow = $("#leftArrow");
        let left = $("#instructionId").width();
        let leftTarget = parseInt($leftArrow.css("left")) + left;
        $leftArrow.animate({

            left: leftTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
        let $rightArrow = $("#rightArrow");
        let right = $("#instructionId").width();
        let rightTarget = parseInt($rightArrow.css("left")) - right;
        $rightArrow.animate({

            left: rightTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
    }
    // This function stops the arrow animations and removes the arrows
    function RemoveArrows() {
        clearInterval(arrowInterval);
        $("#leftArrow").remove();
        $("#rightArrow").remove();
    }
</script>
<body>
    <div style="text-align:center">
        <h1 style="color:gold"> פלאפי הציפור </h1>
        <h2 style="color:gold"> עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה  </h2>
        <div id="arrowDiv">
            <img id="leftArrow" class="arrow" src="~/Pictures/Game_20/arrowLeft.png" />
            <i id="instructionId" class="fa fa-volume-up"></i>
            <img id="rightArrow" class="arrow" src="~/Pictures/Game_20/arrowRight.png" />
        </div>
        <input class="myButton" id="buttonId" type="button" value="התחלה" onclick="StartGame()" />
        <input class="myButton" id="buttonRet" type="button" value="חזור לאותיות" onclick="GoToAlphabet()" />
    </div>
    <section id="sectionId" class="w3-display-container" style="width:420px;height:480px">
        <div id="heartDiv"></div>
        <div id="scoreDiv" class="w3-display-topleft"><p id="scoreId">0</p></div>
        <img id="birdId" src="~/Pictures/Game_20/bird1.png" />
    </section>
    <div id="silenceDiv">
        <input id="silenceBtn" type="button" value="🔔" onclick="ChangeSilenceBtn()" />
    </div>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h1 id="gameOverh"><b>ניקוד: </b><b><span id="finalScore"></span></b></h1>
        <input class="gameOverBtn, myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
    </div>
</body>