@model LearnHebrew.Models.GameInformationModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style>
    section {
        width: 50%;
        height: 54%;
        border: 1px solid black;
        position: relative;
        margin: auto;
        background-image: url('../../Pictures/Game_5/space.jpg');
    }

    body {
        background-image: url('../../Pictures/Game_5/planet.jpg');
        background-position: center;
        background-repeat: no-repeat;
        /*background-size: cover;*/
        background-size: 100% 100%;
        background-attachment: fixed;
    }
    footer {
        /*position: absolute;*/
        bottom: 0;
        font-weight: bold;
        width: 100%
    }
    #user {
        width: 10%;
        height: 12%;
        top: 88%;
        left: 45%;
        position: absolute;
    }

    .enemy, .shot {
        width: 6%;
        height: 9%;
        position: absolute;
    }

    #endGameScreen {
    }


    table {
        margin: auto;
        border: 1px solid black;
        border-collapse: collapse;
    }

    .hidescreen {
        display: none;
    }
    .heart {
        opacity: 0.7;
        width: 25px;
    }

    #heartDiv {
        position: absolute;
        right: 0;
        top: 0;
        float: right;
        text-align: right;
        height: 50%;
    }
    #heartId {
        opacity: 0.7;
        width: 8%;
        height: 10%;
        top: 2%;
        left: 90%;
        position: absolute;
    }

    #lifeId {
        top: 0%;
        left: 93%;
        position: absolute;
        font-size: medium;
        color: gold;
    }

    #scoreId {
        top: 0%;
        left: 7%;
        position: absolute;
        font-size: x-large;
        color: red;
    }

    #instructionId {
        cursor: pointer;
        color: goldenrod;
        margin-bottom: 10px;
        font-size: 30px;
        
    }

    .buttonClass {
        margin: 0 auto;
        border-radius: 12px;
        color: gold;
        font-size: large;
        background-color: hotpink;
        cursor: pointer;
        outline: none;
    }

    .pCalss {
        position: absolute;
        left: 48%;
        color: gold;
        font-size: xx-large;
        padding-left: 20px;
    }

    .audios {
        display: none;
    }

    #explanationId {
        cursor: pointer;
    }
    .gameOverBtn {
        margin-top: 10px;
        outline: none;
    }
    #silenceBtn {
        margin: 15px;
        border-radius: 30px;
        font-size:20px;
        cursor: pointer;
        background-color:transparent;
        outline:none;
    }
    .arrow {
        height: 30px;
        
        position: absolute;
    }
    #arrowDiv {
        position: relative;
    }
    #title {
        font-family: 'Miri';
    }

    #secondTitle {
        font-family: 'Gan';
    }
</style>
<script>
    let move = 25;// setting moving distance per move for user
    let $User;// placeholder  for the user in every new game
    let shotTime = 5000;// 5 seconds for shot to remove itself from the screen
    let alienTime = 10000;// the time for the "aliens" to remove themselves from the screen
    let alienSpawnTime = 1000;// time of spawning enemies
    let gameoverIndicator;// interval animation of spawning enemies
    let validLetters = [];// array of valid letter for the game, baed on the user
    let invalidLetters = [];// array of invalid letter for the game, baed on the user
    let lives = 3;// the amount of times the user can play
    let arrowInterval;// the interval variable of the arrow animation

    $(document).ready(function () {
        FillLetters();
        LoadGameInstruction();
        windowResize();
        SetArrows();
        arrowInterval = setInterval(MoveArrows, 1000);
    })
    // This function sets the location of the image arrows
    function SetArrows() {
        let x = $("#instructionId").position();
        x = x.left - $("#leftArrow").width() - $("#instructionId").width();
        let x2 = $("#instructionId").position();
        x2 = x2.left + ($("#instructionId").width() * 2);
        $("#leftArrow").css("left", x + "px");
        $("#rightArrow").css("left", x2 + "px");
    }
    // This function enables the movement of the image arrows
    function MoveArrows() {
        let $leftArrow = $("#leftArrow");
        let left = $("#instructionId").width();
        let leftTarget = parseInt($leftArrow.css("left")) + left;
        $leftArrow.animate({
            
            left: leftTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });     
        let $rightArrow = $("#rightArrow");
        let right = $("#instructionId").width();
        let rightTarget = parseInt($rightArrow.css("left")) - right;
        $rightArrow.animate({

            left: rightTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
    }
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',           
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {              
                for (let i = 0; i < 5; i++) {
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);                
                }
                for (let j = 0; j < data.InValidLetterName.length; j++) {
                    invalidLetters.push("/Pictures/Alphabet/" + data.InValidLetterName[j]); 
                }
            }
        });
    }
    // This function resizes objects on the screen  
    function windowResize() {
        $(window).resize(function () {
            $("#leftArrow").stop();
            $("#rightArrow").stop();
            $("#leftArrow").addClass("hidescreen");
            $("#rightArrow").addClass("hidescreen");
            setTimeout(
                function () {
                    $("#leftArrow").removeClass("hidescreen");
                    $("#rightArrow").removeClass("hidescreen");
                }, 2100);                     
            SetArrows();
            
            $("#user").css("left", Math.floor(parseInt($("#sectionId").css("width")) / 2) + "px");
            $(".enemy").each(function () {
                let $enemy = $(this);
                $enemy.stop();
                $enemy.remove();
            });

        })
    }
    // This function pre loads the game instructions
    function LoadGameInstruction() {
        let obj = document.createElement("audio");
        obj.src = "/Audio/Game_5/game_explanation.mp3";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#instructionId").click(function () {
            obj.play();
        });
    }
    // This function pre loads the sound and pictures of this game
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_5/shot.mp3").load();
        new Audio("/Audio/Game_5/SFX_Explosion_02.mp3").load();
        for (let i = 0; i < validLetters.length; i++) 
            fetch(validLetters[i]);
       
        for (let j = 0; j < invalidLetters.length; j++) 
            fetch(invalidLetters[j]);
        
    }
    // This function starts the game
    function StartGame() {
        $User = $("#user");//linking placeholder to user in current game
        RemoveArrows();
        $("#buttonId").addClass("hidescreen");
        FillHearts();
        LoadSoundAndPicture();
        $("body").keydown(userKey_Options);
        gameoverIndicator = setInterval(createEnemy, alienSpawnTime);
    }
    //This function enables the user movement
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (37):// left keyboard was pressed=moving the user one move to the left
                MoveLeft();
                break;
            case (39):// right keyboard was pressed=moving the user one move to the right
                MoveRight();
                break;
            case (38)://up keyboard was pressed=firing a single shot
                shooting();
                break;
        }
    }
    // This function moves the use left
    function MoveLeft() {
        MoveUser(-1 * move);
    }
    // This function moves the use right
    function MoveRight() {
        MoveUser(move);
    }
    // This function moves the use if possible
    function MoveUser(axisX) {
        let currentPosition = parseInt($User.css("left"));//getting current position of user
        let newPosition = currentPosition + axisX;//calculating new position of user
        if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($User.css("width"))))//need to be changed ifsection limits user changes game
            $User.css("left", newPosition + "px");//moving user to new position

    }
    // This function creates a "shot" image and appends it to the game
    function shooting() {
        CreateShotSound();
        let $shot = $("<img>");
        $shot.attr("src", "/Pictures/Game_5/shot.png");

        $shot.addClass("shot");
        let shotStartingPoint_Yaxis = parseInt($User.css("top")) - parseInt($shot.css("width"));//calculating height of shot
        let shotStartingPoint_Xaxis = parseInt($User.css("left")) + (parseInt($User.css("width")) / 4);
        $shot.css("top", shotStartingPoint_Yaxis + "px");
        $shot.css("left", shotStartingPoint_Xaxis + "px");

        $("section").append($shot);

        $shot.animate({
            top: "0px"


        }, {
                duration: shotTime,
                easing: "linear",
                complete: deleteObject



            });
    }
    // This function removes an object
    function deleteObject() {
        $(this).remove();
    }
    // This function creates an " enemy" letter
    function createEnemy() {

        let $enemy = $("<img>");
        let enemyType = Math.floor((Math.random() * 10) + 1);

        if (enemyType >= 1 && enemyType <= 7) {
            let randomNumber = Math.floor((Math.random() * validLetters.length) +0 );
            $enemy.attr("src", validLetters[randomNumber]);

        }

        else {
            let randomNumber = Math.floor((Math.random() * invalidLetters.length) + 0);
            $enemy.attr("src", invalidLetters[randomNumber]);

        }
        $enemy.addClass("enemy");
        let axisX = randomEnemy_Place();
        $enemy.css("top", 0 + "px");
        $enemy.css("left", axisX + "px");

        $("section").append($enemy);

        $enemy.animate({
            top: (parseInt($("section").css("height"))) - (parseInt($enemy.css("height"))) + "px"


        }, {
                duration: alienTime,
                easing: "linear",
                progress: collisionCheck,
                complete: deleteObject

            });

    }
    // This function returns a random axisX position
    function randomEnemy_Place() {
        let limitLeft = (parseInt($User.css("width")) / 4);//floot
        let limitRight = parseInt($("section").css("width")) - (parseInt($User.css("width")));
        return Math.floor((Math.random() * limitRight) + limitLeft);
    }
    // This function checks for a collision between and "enemy" letter and a "shot"
    function collisionCheck() {
        let $enemy = $(this);//getting the current "enemy" letter
        $(".shot").each(function () {
            let $shot = $(this);

            if (checkIntersection($shot, $enemy)) {

                enemyDestroyed($enemy);

                $shot.stop();
                $shot.remove();
                $enemy.stop();
                $enemy.remove();

            }

        });

    }
    // This functions checks for an Intersection between 2 objects
    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    // This function checks if an "enemy" letter removal grants a point or removes a "heart"
    function enemyDestroyed($enemy) {
        let indicator = false;      
        CreateExplotionSound();
        for (let i = 0; i < validLetters.length; i++) {
            if ($enemy.attr('src') == validLetters[i]) {
                $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
                indicator = true;
                break;
            }
        }
        if (!indicator) {
            lives--;
            RemoveHeart();
        }
        if (lives == 0) {
            GameOver();
        }
    }
    // This function creates the exploding sound
    function CreateExplotionSound() {
        if ($("#silenceBtn").val() == "🔔") {
            let $sound = $("<audio>");
            $sound.attr("src", "/Audio/Game_5/SFX_Explosion_02.mp3");
            $sound[0].play();
        }       
    }
    // This funcion sets up the game hearts (lives)
    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_5/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);
        }
    }
    // This funcion removes remaining hearts on screen and replaces them with an updated heart amount
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }
    //This function creates a "shot" sound
    function CreateShotSound() {
        if ($("#silenceBtn").val() == "🔔") {
            let $sound = $("<audio>");
            $sound.attr("src", "/Audio/Game_5/shot.mp3");
            $sound[0].play();
        }    
        
    }
    // This function stops the arrow animations and removes the arrows
    function RemoveArrows() {
        clearInterval(arrowInterval);
        $("#leftArrow").remove();
        $("#rightArrow").remove();
    }
    // This function removes all shot images
    function RemoveShots() {
        $(".shot").remove();
    }
    // This function ends the game
    function GameOver() {
        clearInterval(gameoverIndicator);
        RemoveShots();
        $("#sectionId").addClass("hidescreen");
        $("footer").css("position", "absolute");
        $("#tableId").addClass("hidescreen");
        $("#buttonId").addClass("hidescreen");
        $("#instructionDiv").addClass("hidescreen");
        $("#instructionId").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
        $('*').off('keydown');
    }
    // This function return the player to "Alphabet" page
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
    // This function changes the slience button's appearance
    function ChangeSilenceBtn() {
        if ($("#silenceBtn").val() == "🔔") {
            $("#silenceBtn").val("🔕");
        }
        else {
            $("#silenceBtn").val("🔔");
        }
        $("#silenceBtn").blur();       
    }
   
</script>

<body>
    <div style="text-align:center">
        <h1 id="title" style="color:gold"> חללית חלל </h1>
        <h2 id="secondTitle" style="color:gold">עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה</h2>
        <div id="arrowDiv">
            <img id="leftArrow" class="arrow" src="~/Pictures/Game_5/arrowLeft.png" />
            <i id="instructionId" class="fa fa-volume-up"></i>
            <img id="rightArrow" class="arrow" src="~/Pictures/Game_5/arrowRight.png" />
        </div>
    </div>
    <section id="sectionId" class="w3-display-container">
        <p id="scoreId">0</p>
        <div id="heartDiv"></div>
        <img id="user" src="~/Pictures/Game_5/ship.png" />
    </section>
    <div id="instructionDiv" style="text-align:center;padding-top:5px">
        <h2 style="color:gold"><b>  אות משחק זה היא @Model.Letter </b></h2>
        <input id="buttonId" class="buttonClass" type="button" value="התחלה" onclick="StartGame()" />
        <input id="buttonRet" class="buttonClass" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
        <div id="silenceDiv">
            <input id="silenceBtn" type="button" value="🔔" onclick="ChangeSilenceBtn()" />
            @*<footer style="text-align:center;font-size:x-small;display:block"><p>Ⓒ 2020 Learn-Hebrew</p></footer>*@
        </div>
    </div>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h1 style="color:gold; font-size:60px"><b>ניקוד: </b><b><span id="finalScore"></span></b></h1>
        <input id="retBtn" class="buttonClass" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />

    </div>
    <footer style="text-align:center;font-size:x-small;display:block"><p>Ⓒ 2020 Learn-Hebrew</p></footer>

</body>

