@{
    Layout = null;
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style>
    section {
        width: 50%;
        height: 54%;
        border: 1px solid black;
        position: relative;
        margin: auto;
        background-image: url('../../Pictures/Game_5/space.jpg');
    }
    body {
        background-image: url('../../Pictures/Game_5/planet.jpg');
        background-position:center;
        background-repeat:no-repeat;
        background-size:cover;
    }
    #user {
        width: 10%;
        height: 12%;
        top: 88%;
        left: 45%;
        position: absolute;
    }

    .enemy, .shot {
        width: 6%;
        height: 9%;
        position: absolute;
    }

    #endGameScreen {
        
       
        
    }


    table {
        margin: auto;
        border: 1px solid black;
        border-collapse: collapse;
    }

    .hidescreen {
        display: none;
    }
    #heartId {
        opacity: 0.7;
        width: 8%;
        height: 10%;
        top: 2%;
        left: 90%;
        position: absolute;
    }
    #lifeId {
        top: 0%;
        left: 93%;
        position: absolute;
        font-size: medium;
        color:gold;
       
    }
    #scoreId {
        top: 0%;
        left: 7%;
        position: absolute;
        font-size: x-large;
        color: gold;
    }
    .buttonClass {
        
        margin:0 auto;
        
        border-radius:12px;
        color:gold;
        font-size:large;
        background-color:hotpink
       
    }
    .pCalss {
        position: absolute;
        left: 48%;
        color: gold;
        font-size: xx-large;
        padding-left:20px;
    }
    .audios {
        display: none;
    }
    #explanationId{
        cursor:pointer;
    }
</style>
<script>
    var move = 25;//setting moving distance per move for user
    var $User;//placeholder  for the user in every new game
    var shotTime = 5000;//5 seconds for shot to clear out
    var alienTime = 10000;
    var alienSpawnTime = 1000;//time of spawning enemies
    var gameoverIndicator;//interval animation of spawning enemies
    var validLetters;
    var invalidLetters;
    
    $(document).ready(function () {       
        validLetters = ["/Pictures/Game_5/haay1.png", "/Pictures/Game_5/haay2.png", "/Pictures/Game_5/haay3.png"];
        invalidLetters = ["/Pictures/Game_5/lamad1.png", "/Pictures/Game_5/kuuf1.png", "/Pictures/Game_5/raaish1.png"];
        LoadSoundAndPicture();
        var obj = document.createElement("audio");
        obj.src = "/Audio/Game_5/game_explanation.mp3";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#explanationId").click(function () {
            obj.play();
            // obj.pause();
        });

        $(window).resize(function () {
            $("#user").css("left", Math.floor(parseInt($("#sectionId").css("width")) / 2) + "px");
            $(".enemy").each(function () {
                let $enemy = $(this);
                $enemy.stop();
                $enemy.remove();               
            });

        })
    })
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_5/shot.mp3").load();
        new Audio("/Audio/Game_5/SFX_Explosion_02.mp3").load();
        //this may need to be changes once games become dynamic letter based
        for (let i = 0; i < validLetters.length; i++) {
            fetch(validLetters[i]);
        }
        for (let j = 0; j < invalidLetters.length; j++) {
            fetch(invalidLetters[j]);
        }
    }
    function StartGame() {
        $User = $("#user");//linking placeholder to user in current game
        $("#buttonId").addClass("hidescreen");

        $("body").keydown(userKey_Options);
        gameoverIndicator = setInterval(createEnemy, alienSpawnTime);
    }
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (37):// left keyboard was pressed=moving the user one move to the left
                MoveLeft();
                break;
            case (39):// right keyboard was pressed=moving the user one move to the right
                MoveRight();
                break;
            case (38)://up keyboard was pressed=firing a single shot
                shooting();
                break;
        }
    }
    function MoveLeft() {
        MoveUser(-1 * move);
    }
    function MoveRight() {
        MoveUser(move);
    }
    function MoveUser(axisX) {
        var currentPosition = parseInt($User.css("left"));//getting current position of user
        var newPosition = currentPosition + axisX;//calculating new position of user
        //alert(parseInt($("#sectionId").css("width")));
        if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($User.css("width"))))//need to be changed ifsection limits user changes game
            $User.css("left", newPosition + "px");//moving user to new position

    }
    function shooting() {
        CreateShotSound();
        var $shot = $("<img>");
        $shot.attr("src", "/Pictures/Game_5/shot.png");

        $shot.addClass("shot");
        var shotStartingPoint_Yaxis = parseInt($User.css("top")) - parseInt($shot.css("width"));//calculating height of shot
        var shotStartingPoint_Xaxis = parseInt($User.css("left")) + (parseInt($User.css("width")) / 4);
        $shot.css("top", shotStartingPoint_Yaxis + "px");
        $shot.css("left", shotStartingPoint_Xaxis + "px");

        $("section").append($shot);

        $shot.animate({
            top: "0px"


        }, {
                duration: shotTime,
                easing: "linear",
                complete: deleteObject



            });
    }
    function deleteObject() {
        $(this).remove();
    }
    function createEnemy() {

        var $enemy = $("<img>");
        var enemyType = Math.floor((Math.random() * 10) + 1);

        if (enemyType >= 1 && enemyType <= 7) {
            var randomNumber = Math.floor((Math.random() * validLetters.length) +0 );
            $enemy.attr("src", validLetters[randomNumber]);

        }

        else {
            var randomNumber = Math.floor((Math.random() * invalidLetters.length) + 0);
            $enemy.attr("src", invalidLetters[randomNumber]);

        }
        $enemy.addClass("enemy");
        var axisX = randomEnemy_Place();
        $enemy.css("top", 0 + "px");
        $enemy.css("left", axisX + "px");

        $("section").append($enemy);

        $enemy.animate({
            top: (parseInt($("section").css("height"))) - (parseInt($enemy.css("height"))) + "px"


        }, {
                duration: alienTime,
                easing: "linear",
                progress: collisionCheck,
                complete: deleteObject

            });

    }
    function randomEnemy_Place() {
        var limitLeft = (parseInt($User.css("width")) / 4);//floot
        var limitRight = parseInt($("section").css("width")) - (parseInt($User.css("width")));
        return Math.floor((Math.random() * limitRight) + limitLeft);
    }
    function collisionCheck() {
        var $enemy = $(this);//getting the current enemy


        $(".shot").each(function () {
            var $shot = $(this);

            if (checkIntersection($shot, $enemy)) {

                enemyDestroyed($enemy);

                $shot.stop();
                $shot.remove();
                $enemy.stop();
                $enemy.remove();

            }

        });

    }
    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    function enemyDestroyed($enemy) {
        var indicator = false;
        //var sound = $("#yes-audio")[0];
        //sound.play();
        CreateExplotionSound();
        for (var i = 0; i < validLetters.length; i++) {
            if ($enemy.attr('src') == validLetters[i]) {
                $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
                indicator = true;
                break;
            }



        }
        if (!indicator) {
            $("#lifeId").text(parseInt($("#lifeId").text()) - 1);
        }
        if ($("#lifeId").text() == '0') {
            GameOver();
        }
        //if (jQuery.inArray(($enemy.attr('src'), validLetters) != -1)) {
        //    $("#score").text(parseInt($("#score").text()) + 1);

        //}
        //else {
        //    $("#life").text(parseInt($("#life").text()) - 1);
        //    if ($("#life").text() == '0')
        //        GameOver();
        //}
    }
    function CreateExplotionSound() {
        let $sound = $("<audio>");
        $sound.attr("src", "/Audio/Game_5/SFX_Explosion_02.mp3");
        
        $sound[0].play();
        
    }
    function CreateShotSound() {
        let $sound = $("<audio>");
        $sound.attr("src", "/Audio/Game_5/shot.mp3");

        $sound[0].play();
    }
    function GameOver() {
        clearInterval(gameoverIndicator);
        //do popoup here to let the user go back to alphabet
        $("#sectionId").addClass("hidescreen");
        $("#tableId").addClass("hidescreen");
        $("#buttonId").addClass("hidescreen");
        $("#instructionId").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
        $('*').off('keydown');
    }
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
    //function GameExplanation() {
    //    //<audio id="soundEx"  controls="controls">
    //    //    <source src="~/Audio/Game_5/game_explanation.mp3" type="audio/mpeg" />
    //    //</audio>
    //    var obj = $("<audio>");
    //    obj.css("src", "/Audio/Game_5/game_explanation.mp3");
    //    //a.css("type", "audio/mpeg");
    //    obj.attr("id", "soundEx");
    //    obj.volume = 0.1;
    //    obj.autoPlay = false;
    //    obj.preLoad = true;
    //    obj.controls = true;
    //    obj.play();
    //    //var sound = $("#soundEx")[0];
    //    //sound.play();
    //}
</script>

<body>
    <div style="text-align:center">
        <h1 style="color:gold"> חללית חלל </h1>
        <h2 style="color:gold">עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה</h2>
        <i id="explanationId" style="color:gold" class="fa fa-volume-up"></i>
    </div>
    <br />
    <section id="sectionId">
        <p id="scoreId">0</p>
        <p id="lifeId">1</p>
        <img id="heartId" src="~/Pictures/Game_5/heart.png" />
        <img id="user" src="~/Pictures/Game_5/ship.png" />
    </section>
    <div id="instructionId" style="text-align:center;padding-top:5px">
        <h2 style="color:gold"> אות משחק זה היא: ה</h2>
        <input id="buttonId" class="buttonClass" type="button" value="התחלה" onclick="StartGame()" />

    </div>

    <br />

    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h1 style="color:gold"><b>ניקוד: </b><span id="finalScore"><b></b></span></h1>
        <br />
        <input class="buttonClass" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />

    </div>

    <audio class="audios" controls="controls" id="yes-audio">
        <source src="/Audio/Game_5/explosion.mp3" type="audio/mpeg" />
    </audio>

    
</body>

