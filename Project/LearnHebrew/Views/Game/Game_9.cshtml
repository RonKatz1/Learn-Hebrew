@model LearnHebrew.Models.GameInformationModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>


<style>
    body {
        background-image: url('../../Pictures/Game_9/space&planes_background.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: 100% 100%;
        background-attachment: fixed;
    }

    section {
        width: 50%;
        height: 80%;
        border: 1px solid black;
        position: relative;
        margin: auto;
    }
    footer {
        /*position: absolute;*/
        bottom: 0;
        font-weight: bold;
        width: 100%
    }
    #rocketId {
        position: absolute;
        width: 10%;
        height: 12%;
    }


    .letter {
        width: 4%;
        height: 4%;
        position: absolute;
    }

    .shot {
        width: 4%;
        height: 4%;
        position: absolute;
    }


    #endGameScreen {
        height: 90%;
    }

    .hidescreen {
        display: none;
    }

    .heart {
        opacity: 0.7;
        width: 25px;
    }

    #heartDiv {
        position: absolute;
        right: 0;
        top: 0;
        float: right;
        text-align: right;
    }

    #scoreId {
        margin-left: 15px;
        font-size: x-large;
        color: red;
    }

    .myButton {
        box-shadow: inset 0px 1px 0px 0px #f9eca0;
        background: linear-gradient(to bottom, #f0c911 5%, #f2ab1e 100%);
        background-color: #f0c911;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: #c92200;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
        outline: none;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }

    #instructionId {
        cursor: pointer;
        margin-bottom: 5px;
        font-size: 30px;
    }
    .gameOverBtn {
        margin-top: 10px;
        outline: none;
    }
    #silenceDiv {
        text-align: center;
    }

    #silenceBtn {
        margin: 15px;
        border-radius: 30px;
        font-size: 20px;
        cursor: pointer;
        background-color: transparent;
        outline: none;
    }

    .arrow {
        height: 30px;
        position: absolute;
    }

    #arrowDiv {
        position: relative;
    }
</style>
<script>
    let validLetters = [];// array of valid letter for the game, baed on the user
    let letterMovementRate = 800;// time in mili seconds for all letters to move
    let letterMovementInterval, enemyShootingInterval;//interval for movement, letter shooting
    let letterMover = 10;// movement value of each letter per movement action
    let $letterMatrix=[];// will contain all letters
    let letterAmountRow = 6;// number of letters in a row
    let letterAmountCol = 6;// number of letters in a col
    let lives = 6; // number of times a user can die in the game
    let gameStarted = false; // boolean variable for game started (not letting pressed enter after game has started)
    let move;// setting moving distance per move for user
    let $rocket;// placeholder  for the user in every new game
    let gameWonBol=false;// boolean variable for deciding the sentence at the end of the game
    let rocketTop;// this variable helps in deciding if a letter has reached the rocket
    let letterShootingSpeed = 2000;// the time it takes a shot from a letter to reach the end of the section
    let letterShootingRate = 1000;// the time it takes a letter to shoot
    let rocketShotTimer = 500;// the time it takes for the rocket to recharge shot
    let rocketShotBol = true;// boolean variable for knowing the shot of the rocket is charged
    let arrowInterval;// the interval variable of the arrow animation


    $(document).ready(function () {
        $rocket = $("#rocketId");
        $rocket.css("bottom", 0);
        move = Math.floor(parseInt($rocket.css("width")) / 2);
        $rocket.css("left", Math.floor(parseInt($rocket.css("width")) / 2));
        rocketTop = parseInt($rocket.css("top"));
        LoadGameInstruction();
        FillLetters();
        windowResize();
        SetArrows();
        arrowInterval = setInterval(MoveArrows, 1000);
        $("body").keyup(userKey_Options);
    })
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',           
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {              
                for (let i = 0; i < 5; i++) 
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);                                             
            }
        });
    }
    // This function resizes objects of the game according to the current size of the screen
    function windowResize() {
        $(window).resize(function () {//for window resizing
            $("#leftArrow").stop();
            $("#rightArrow").stop();
            $("#leftArrow").addClass("hidescreen");
            $("#rightArrow").addClass("hidescreen");
            setTimeout(
                function () {
                    $("#leftArrow").removeClass("hidescreen");
                    $("#rightArrow").removeClass("hidescreen");
                }, 2100);
            SetArrows(); 

            $rocket.css("left", Math.floor(parseInt($rocket.css("width")) / 2));
            move = Math.floor(parseInt($rocket.css("width")) / 2);
            rocketTop = parseInt($rocket.css("top"));
            if (gameStarted)//if the game has already started once
                ResetGame();//if the winddow size was changed the game will reset

        })
    }
    // This funcion pre loads the instruction audio of the game
    function LoadGameInstruction() {
        let obj = document.createElement("audio");
        obj.src = "/Audio/Game_9/Game_9_instructions.mp4";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#instructionId").click(function () {
            obj.play();
        });
    }
    // This funcion pre loads the sound and pictures of the game
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_9/lose_life.mp3").load();
        new Audio("/Audio/Game_9/SFX_Explosion_03.mp3").load();
        for (let i = 0; i < validLetters.length; i++) {
            fetch(validLetters[i]);
        }
    }
    // This function enables certain audio files at certain events
    function CreateSound(number = 10) {
        if ($("#silenceBtn").val() == "🔔") {
            let $sound;
            if (number == 1) {//letter destroyed
                $sound = new Audio("/Audio/Game_9/SFX_Explosion_03.mp3");
            }
            else {//rocket was hit
                $sound = new Audio("/Audio/Game_9/lose_life.mp3");
            }
            $sound.play();
        }           
    }
    // This funcion enables pressed keyboard events
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (13):// enter was pressed
                if (!gameStarted) {
                    StartGame();
                    gameStarted = true;
                }
                break;
            case (37):// left keyboard was pressed = moving the user one move to the left
                MoveLeft();
                break;
            case (39):// right keyboard was pressed = moving the user one move to the right
                MoveRight();
                break;
            case (32)://space keyboard was pressed = firing a single shot
                if(rocketShotBol){
                    RocketShooting();
                }

                break;
        }
    }
    // This funcion moves the rocket left
    function MoveLeft() {
        MoveUser(-1 * move);
    }
    // This funcion moves the rocket left
    function MoveRight() {
        MoveUser(move);
    }
    // This funcion decidesif the rocket is able to move further left or right on the current screen
    function MoveUser(axisX) {
        let currentPosition = parseInt($rocket.css("left"));//getting current position of user
        let newPosition = currentPosition + axisX;//calculating new position of user
        if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($rocket.css("width"))))//need to be changed ifsection limits user changes game
            $rocket.css("left", newPosition + "px");//moving user to new position

    }
    // This funcion sets up the game
    function StartGame() {
        gameStarted = true;
        RemoveArrows();
        LoadSoundAndPicture();
        FillHearts();
        $("#buttonId").addClass("hidescreen");
        $("#buttonRet").removeClass("hidescreen");
        $("#buttonRet").addClass("myButton");
        FillLetterArray();
        letterMovementInterval = setInterval(MoveLetters, letterMovementRate);
        enemyShootingInterval = setInterval(EnemyShooting, letterShootingRate);
    }
    // This funcion resets the game
    function ResetGame() {
        clearInterval(letterMovementInterval);
        clearInterval(enemyShootingInterval);
        $letterMatrix.length = 0;
        $("#scoreId").text(0);
        lives = 6;
        RemoveHeart();
        $(".letter").each(function () {
            $(this).remove();
        });
        FillLetterArray();
        letterMovementInterval = setInterval(MoveLetters, letterMovementRate);
        enemyShootingInterval = setInterval(EnemyShooting, letterShootingRate);
    }
    // This funcion creates all the letters, filling the lette mathrix with them and appends them to the screen
    function FillLetterArray() {

        for (let i = 0; i < letterAmountRow; i++) {
            let $letterRow=[];
            for (let j = 0; j < letterAmountCol; j++) {
                let letterImage = Math.floor((Math.random() * validLetters.length) + 0);
                let $letter = $("<img>");
                $letter.attr("src", validLetters[letterImage]);
                $letter.addClass("letter");

                let rocketSize = parseInt($rocket.css("width"));//for placing each letter within the section in a certain distance
                let axisX = (i * 40) + rocketSize;
                let axisY = (j * 40) + rocketSize;
                $letter.css("left", axisX + "px");
                $letter.css("top", axisY + "px");
                $letter.attr("id", "letter" + i + j);
                $("#sectionId").append($letter);

                $letterRow.push($letter);

            }
            $letterMatrix.push($letterRow);


        }
    }
    // This funcion sets up the game hearts (lives)
    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_9/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);

        }
    }
    // This funcion moves all the letters on screen right, left or down (depending on current state of them)
    function MoveLetters() {

        let wall = false;
        $(".letter").each(function () {
            const $letter = $(this);
            if (letterMover > 0) {

                let currentPosition = parseInt($letter.css("left"));//getting current position of letter
                let newPosition = currentPosition + letterMover;//calculating new position of user

                if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($letter.css("width"))))//need to be changed ifsection limits letter changes game
                    console.log()//moving letter to new position
                else {
                    wall = true;
                }
            }
            else {//letterMover < 0
                let currentPosition = parseInt($letter.css("left"));//getting current position of letter
                let newPosition = currentPosition + letterMover;//calculating new position of user
                //alert(parseInt($("#sectionId").css("width")));
                if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($letter.css("width"))))//need to be changed ifsection limits letter changes game
                    console.log();//moving letter to new position
                else {
                    wall = true;
                }
            }
        });

        if (wall) {
            letterMover *= -1;
            $(".letter").each(function () {
                let $letter = $(this);
                let currentTop = parseInt($letter.css("top"));
                let newTop = currentTop + (Math.abs(letterMover) * 3);
                let temp = (parseInt($rocket.css("top"))) - (parseInt($rocket.css("height")) / 2);
                if (newTop < temp) {
                    $letter.css("top", newTop + "px");
                }
                else {
                    GameOver();
                }
            });}

        $(".letter").each(function () {
            const $letter = $(this);
            let currentPosition = parseInt($letter.css("left"));//getting current position of letter
            let newPosition = currentPosition + letterMover;//calculating new position of user
            $letter.css("left", newPosition + "px");//moving letter to new position
        });



    }
    // This funcion creates and sends shot images from the rocket towards the letters
    function RocketShooting() {
        rocketShotBol = false;
        setTimeout(function () {
            rocketShotBol = true;
        }, rocketShotTimer);


        let $shot = $("<img>");
        $shot.attr("src", "/Pictures/Game_9/greenBall.png");

        $shot.addClass("shot");
        let shotStartingPoint_Yaxis = parseInt($rocket.css("top")) - parseInt($shot.css("width"));//calculating height of shot
        let shotStartingPoint_Xaxis = parseInt($rocket.css("left")) + (parseInt($rocket.css("width")) / 3) + (parseInt($rocket.css("width")) / 11);
        $shot.css("top", shotStartingPoint_Yaxis + "px");
        $shot.css("left", shotStartingPoint_Xaxis + "px");

        $("section").append($shot);

        $shot.animate({
            top: "0px"


        }, {
                duration: 2000,
                easing: "linear",
                progress: collisionCheck,
                complete: deleteObject



            });
    }
    // This funcion checks for a collision between a letter to a shot image from the rocket
    function collisionCheck() {
        let $shot = $(this);//getting the current shot


        $(".letter").each(function () {
            let $letter = $(this);

            if (checkIntersection($letter, $shot)) {
                CreateSound(1);
                $shot.stop();
                $shot.remove();
                RemoveLetter($letter);
                $letter.remove();
                $("#scoreId").text(parseInt($("#scoreId").text())+ 1);
                if (parseInt($("#scoreId").text()) == (letterAmountRow * letterAmountCol)) {
                    gameWonBol = true;
                    GameOver();
                }
            }
        });

    }
    // This funcion checks for a collision between the rocket to a shot image from a letter
    function collisionCheckLetterShot() {
        let $shot = $(this);//getting the current shot from letter
        if (checkIntersection($rocket, $shot)) {//rocket was hit
            CreateSound();
            $shot.stop();
            $shot.remove();
            lives--;
            if (lives == 0) {
                GameOver();
            }
            else {
                RemoveHeart();
            }
        }
    }
    // This funcion removes remaining hearts on screen and replaces them with an updated heart amount
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }
    // This funcion splices a destroyed letter (letter which is to be removed from the screen) from the letter matrix
    function RemoveLetter(target) {
        for (let i = 0; i < letterAmountRow; i++) {
            for (let j = 0; j < $letterMatrix[i].length; j++) {
                if ($letterMatrix[i][j]) {
                    let test = $letterMatrix[i][j];

                    if (test.attr("id") == target.attr("id")) {
                        if ($letterMatrix[i].length == 100) {//delete this maybe
                            $letterMatrix[i].length = 0;
                            break;
                        }
                        else {
                            $letterMatrix[i].splice(j, 1);
                            break;
                        }
                    }
                }
            }
        }
    }
    // This funcion creates and sends shot images from the letters towards the rocket
    function EnemyShooting() {
        let bottomLetters = [];
        let $shot = $("<img>");
        $shot.attr("src", "/Pictures/Game_9/greenBall.png");
        $shot.addClass("shot");
        for (let i = 0; i < letterAmountRow; i++) {
            if ($letterMatrix[i].length != 0) {
                let lastLetterInArray = $letterMatrix[i].length - 1;
                bottomLetters.push($letterMatrix[i][lastLetterInArray]);
            }
        }
        let randomLetter = GetRandomLetter(bottomLetters);
        let shotStartingPoint_Yaxis = parseInt(randomLetter.css("top"));
        let shotStartingPoint_Xaxis = parseInt(randomLetter.css("left")) + (parseInt(randomLetter.css("width")) / 3);
        $shot.css("top", shotStartingPoint_Yaxis + "px");
        $shot.css("left", shotStartingPoint_Xaxis + "px");

        $("section").append($shot);

        $shot.animate({
            top: (parseInt($("#sectionId").css("height"))) - (Math.floor(parseInt($rocket.css("height")) / 2)) + "px"
        }, {
                duration: letterShootingSpeed,
                easing: "linear",
                progress: collisionCheckLetterShot,
                complete: deleteObject
            });
    }
    // This funcion checks Intersection between two objects
    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    // This function ends all intervals of the game and allows the player to return to "Alphabet" page
    function GameOver() {
        $("#silenceBtn").remove();
        if (gameWonBol) {
            $("#messageId").text("כל הכבוד");
        }
        else {
            $("#messageId").text("לא נורא, נסו שוב בפעם הבאה");
        }
        clearInterval(letterMovementInterval);
        clearInterval(enemyShootingInterval);
        $("#sectionId").addClass("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
    }
    // This function removes the object it was used upon
    function deleteObject() {
        $(this).remove();
    }
    // This function return the player to "Alphabet" page
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
    // Function, given an array of objects, return a random object from the array
    function GetRandomLetter(letterList) {
        return letterList[Math.floor(Math.random() * letterList.length)];
    }
    // This function changes the slience button's appearance
    function ChangeSilenceBtn() {
        if ($("#silenceBtn").val() == "🔔") {
            $("#silenceBtn").val("🔕");
        }
        else {
            $("#silenceBtn").val("🔔");
        }
        $("#silenceBtn").blur();       
    }
    // This function sets the location of the image arrows
    function SetArrows() {
        let x = $("#instructionId").position();
        x = x.left - $("#leftArrow").width() - $("#instructionId").width();
        let x2 = $("#instructionId").position();
        x2 = x2.left + ($("#instructionId").width() * 2);
        $("#leftArrow").css("left", x + "px");
        $("#rightArrow").css("left", x2 + "px");
    }
    // This function enables the movement of the image arrows
    function MoveArrows() {
        let $leftArrow = $("#leftArrow");
        let left = $("#instructionId").width();
        let leftTarget = parseInt($leftArrow.css("left")) + left;
        $leftArrow.animate({

            left: leftTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
        let $rightArrow = $("#rightArrow");
        let right = $("#instructionId").width();
        let rightTarget = parseInt($rightArrow.css("left")) - right;
        $rightArrow.animate({

            left: rightTarget

        }, {
                duration: 500,
                easing: "linear",
                complete: SetArrows

            });
    }
    // This function stops the arrow animations and removes the arrows
    function RemoveArrows() {
        clearInterval(arrowInterval);
        $("#leftArrow").remove();
        $("#rightArrow").remove();
    }
</script>


<body>
    <div style="text-align:center">
        <h1 style="color:gold"> פולשי האותיות </h1>
        <h2 style="color:goldenrod"> עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה או אנטר</h2>
        <div id="arrowDiv">
            <img id="leftArrow" class="arrow" src="~/Pictures/Game_9/arrowLeft.png" />
            <i style="color:goldenrod" id="instructionId" class="fa fa-volume-up"></i>
            <img id="rightArrow" class="arrow" src="~/Pictures/Game_9/arrowRight.png" />
        </div>
        <input class="myButton" id="buttonId" type="button" value="התחלה" onclick="StartGame()" />
        <input class="myButton" id="buttonRet" type="button" value="חזור לאותיות" onclick="GoToAlphabet()" />
    </div>
    <section id="sectionId" class="w3-display-container	">
        <div id="heartDiv"></div>
        <div id="scoreDiv" class="w3-display-topleft"><p id="scoreId">0</p></div>
        <img id="rocketId" src="~/Pictures/Game_9/rocket.png" />
    </section>
    <div id="silenceDiv">
        <input id="silenceBtn" type="button" value="🔔" onclick="ChangeSilenceBtn()" />
    </div>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h1 style="color:gold" id="messageId"><b></b></h1>
        <h1 style="color:gold"><b>ניקוד: </b><span id="finalScore"><b></b></span></h1>
        <input class="myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
    </div>
    <footer style="text-align:center;font-size:x-small;display:block"><p>Ⓒ 2020 Learn-Hebrew</p></footer>

</body>