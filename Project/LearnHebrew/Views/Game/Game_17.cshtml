@model LearnHebrew.Models.GameInformationModel
@{
    Layout = null;
}

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>


<style>
    body {
        background-image: url('../../Pictures/Game_17/ballon_background.png');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    section {
        position: relative;
        width: 95%;
        height: 75%;
        margin: auto;
        cursor: url('../../Pictures/Game_8/target.png'),auto;
    }

    .enemy {
        width: 4%;
        height: 6%;
        position: absolute;
    }

    #endGameScreen {
        height: 50%;
    }

    .hidescreen {
        display: none;
    }

    .balloon {
        position: absolute;
        border-radius: 50%;
        background-color: red;
        width: 50px;
        height: 50px;
    }

    .exploded {
        width: 20%;
        height: 20%;
        position: absolute;
    }

    .firework {
        width: 3%;
        height: 15%;
        position: absolute;
    }
    #ballonContainer {
        position:absolute;
        background-color: aqua;
        width: 100px;
        height: 100px;
    }
    .myButton {
        box-shadow: inset 0px 1px 0px 0px #f9eca0;
        background: linear-gradient(to bottom, #f0c911 5%, #f2ab1e 100%);
        background-color: #f0c911;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: #c92200;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }

    #instructionId {
        cursor: pointer;
        color: goldenrod;
        margin-bottom: 5px;
    }

    .gameOverBtn {
        margin-top: 10px;
    }
</style>

<script>
    let validLetters = [];// array of valid letter for the game, baed on the user
    let invalidLetters = [];// array of invalid letter for the game, baed on the user
    let gameoverIndicator; // interval for spawning enemies until game is over
    let spawnTimer = 700;// the time it takes for a letter to spawn
    let removeLetterTimer = 3500;// the time it takes for a spawned letter to disappear
    let poppingSize = 500;// the max size a ballon can get
    let gameStarted = false; // indicator for game started for not letting pressed enter
    let ballonReduction = 5;// the size of the balloon reduction per enemy spawned
    let ballonEnlarge = 35;// the size of the balloon enlarges per using this var
    let balloonPopped = false;// boolean for knowing if the user won the game
    let fireworksInterval;// interval of firework animation

    $(document).ready(function () {
        LoadGameInstruction();
        FillLetters();
        //windowResize();
        var ballon = $("#balloonId");
        var section = $("#sectionId");
        ballon.css("left", (section.width() / 2) - ballon.width() / 2);
        ballon.css("top", (section.height() / 2) - ballon.height() / 2);
        //let ballonContainer = $("#ballonContainer");
        //ballonContainer.css("left", (section.width() / 2) - ballon.width() / 2);
        //ballonContainer.css("top", (section.height() / 2) - ballon.height() / 2);
    })
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {
                for (let i = 0; i < 5; i++)
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);
                for (let j = 0; j < data.InValidLetterName.length; j++)
                    invalidLetters.push("/Pictures/Alphabet/" + data.InValidLetterName[j]);
            }
        });
    }
    // Function increases the size of the ballon
    function EnlargeBalloon() {
        let ballon = $("#balloonId");

        ballon.width(ballon.width() + ballonEnlarge);
        ballon.height(ballon.height() + ballonEnlarge);
        RealignBalloon();

    }
    // This function realigns the ballon to the center of the screen
    function RealignBalloon() {
        let ballon = $("#balloonId");
        let section = $("#sectionId");
        ballon.css("left", (section.width() / 2) - ballon.width() / 2);
        ballon.css("top", (section.height() / 2) - ballon.height() / 2);
        if (ballon.width() > poppingSize) {
            balloonPopped = true;
            GameOver();
        }
        if (ballon.width() < 20) {
            GameOver();
        }
    }
    // This function pre loads the game instructions
    function LoadGameInstruction() {
        let obj = document.createElement("audio");
        obj.src = "/Audio/Game_17/Game_17_instructions.mp3";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#instructionId").click(function () {
            obj.play();
        });
    }
    // This function starts the game
    function StartGame() {
        gameStarted = true;
        $("#buttonId").addClass("hidescreen");
        $("#buttonRet").removeClass("hidescreen");
        gameoverIndicator = setInterval(createEnemy, spawnTimer);
    }
    // This function creates an "enemy" letter
    function createEnemy() {
        ReduceBalloon();//reducing the current size of the balloon
        let $enemy = $("<img>");
        let enemyType = Math.floor((Math.random() * 10) + 1);
        let randomNumber;
        if (enemyType > 3) {//enemy will be a valid letter
            randomNumber = Math.floor((Math.random() * validLetters.length) + 0);
            $enemy.attr("src", validLetters[randomNumber]);
        }
        else {//enemy will be an invalid letter
            randomNumber = Math.floor((Math.random() * invalidLetters.length) + 0);
            $enemy.attr("src", invalidLetters[randomNumber]);
        }
        $enemy.addClass("enemy");

        let limitLeft = 0;//the next 6 lines determine random axis X and Y of enemy spawn
        let limitRight = $("#sectionId").width() - $enemy.width();
        let axisX = Math.floor((Math.random() * limitRight) + limitLeft);
        let limitUp = 0;
        let limitDown = $("#sectionId").height() - 60;
        let axisY = Math.floor((Math.random() * limitDown) + limitUp);

        $enemy.css("top", axisY + "px");
        $enemy.css("left", axisX + "px");

        $("section").append($enemy);

        let animationType = Math.floor((Math.random() * 2) + 1);
        
        if (animationType == 1) {//falling down animation
            $enemy.animate({
                top: (parseInt($("section").css("height"))) - (parseInt($enemy.css("height"))) + "px"


            }, {
                    step: function (now, fx) {
                        $(this).css('transform', 'rotate(' + now + 'deg)');
                    },
                    duration: removeLetterTimer,
                    easing: "linear",
                    progress: Clicked,
                    complete: deleteObject

                });
        }
        else {//disappearing animation
            $enemy.animate({
                opacity: 0.4


            }, {

                    duration: removeLetterTimer,
                    easing: "linear",
                    progress: Clicked,
                    complete: deleteObject

                });
        }
    }
    // This function is called when a "letter" is clicked
    function Clicked() {
        let indicator = false;//indicator for realizing the enemy was a valid letter
        $(this).unbind().click(function () {
            for (var i = 0; i < validLetters.length; i++) {
                if ($(this).attr('src') == validLetters[i]) {
                    indicator = true;
                    EnlargeBalloon();
                    let $checkMark = $("<img>");
                    $checkMark.addClass("enemy");
                    $checkMark.attr("src", "/Pictures/Game_17/checkmark.png");
                    $checkMark.css("left", $(this).css("left"));
                    $checkMark.css("top", $(this).css("top"));
                    $("#sectionId").append($checkMark);

                    $checkMark.animate({
                        opacity: 0.4
                    }, {
                            duration: spawnTimer,
                            easing: "linear",
                            complete: deleteObject
                        });
                    $(this).finish();
                    break;
                }
            }
            if (!indicator) {//enemy was an invalid letter
                var $error = $("<img>");
                $error.addClass("enemy");
                $error.attr("src", "/Pictures/Game_17/error.png");
                $error.css("left", $(this).css("left"));
                $error.css("top", $(this).css("top"));
                $("#sectionId").append($error);

                $error.animate({
                    opacity: 0.4


                }, {

                        duration: spawnTimer,
                        easing: "linear",
                        complete: deleteObject

                    });
                $(this).finish();

            }

        });
    }
    // Function reduces the size of the ballon per every creation of "enemy" letter
    function ReduceBalloon() {
        let ballon = $("#balloonId");
        ballon.width(ballon.width() - ballonReduction);
        ballon.height(ballon.height() - ballonReduction);

        RealignBalloon();

    }
    // This function creates the "ending sound" when the game ends
    function CreateEndingSound() {
        let $sound = $("<audio>");
        if (balloonPopped == false) {
            $sound.attr("src", "/Audio/Game_17/ballon_bad.mp3");
        }
        else {
            $sound.attr("src", "/Audio/Game_17/ballon_good.mp3");
        }
        $sound[0].play();
    }
    // This function crates the "fireworks" display at the end of the game if the ballon "popped"
    function CreateFirework() {
        let $firework = $("<img>");
        $firework.addClass("firework");
        $firework.attr("src", "/Pictures/Game_17/firework.png");
        let axisX = randomEnemy_PlaceX($firework);
        $firework.css("left", axisX);
        let temp = Math.floor(parseInt($("#sectionId").css("height")) / 5);
        $firework.css("top", (parseInt($("body").css("height"))) - temp + "px");
        $("body").append($firework);

        $firework.animate({
            top: Math.floor(parseInt($("#sectionId").css("height")) / 2) + "px"


        }, {

                duration: 500,
                easing: "linear",
                complete: FireworkExploded

            });
    }
    // This function creates the sound of a "firework"
    function CreateFireworkSound() {
        let $sound = $("<audio>");
        let ExplodedSound = Math.floor((Math.random() * 4) + 1);
        switch (ExplodedSound) {
            case (1):
                $sound.attr("src", "/Audio/Game_17/bang1.mp3");
                break;
            case (2):
                $sound.attr("src", "/Audio/Game_17/bang2.mp3");
                break;
            case (3):
                $sound.attr("src", "/Audio/Game_17/bang3.mp3");
                break;
            case (4):
                $sound.attr("src", "/Audio/Game_17/bang4.mp3");
                break;
        }
        $sound[0].play();
    }
    // This function crates the "fireworks" display at the end of the game if the ballon "popped"
    function FireworkExploded() {
        let $exploded = $(this);
        CreateFireworkSound();
        $exploded.removeClass("firework");
        $exploded.addClass("exploded");
        $exploded.attr("src", "/Pictures/Game_17/firework_explotion.png");
        $exploded.animate({
            opacity: 0.4


        }, {

                duration: 500,
                easing: "linear",
                complete: deleteObject

            });

    }
    // This function return a random axisX position
    function randomEnemy_PlaceX(element) {
        let limitLeft = 0;
        let limitRight = parseInt($("#sectionId").css("width")) - ((parseInt(element.css("height"))) * 2);
        return Math.floor((Math.random() * limitRight) + limitLeft);
    }
    // This function ends the game
    function GameOver() {
        clearInterval(gameoverIndicator);
        $("#sectionId").addClass("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        CreateEndingSound();
        if (balloonPopped) {
            $("#messageId").text("הבלון התפוצץ");
            fireworksInterval = setInterval(CreateFirework, 800);
        }
        else {
            $("#messageId").text("לא נורא, הבלון יתפוצץ בפעם הבאה");
        }
        $("#endGameScreen").removeClass("hidescreen");
    }
    // This function removes an object
    function deleteObject() {
        $(this).remove();
    }
    // This function redirects user to the alphabet view
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
</script>

<body>
    <div style="text-align:center">
        <h1 style="color:black"><b> פיצוץ בלון </b></h1>
        <h2 style="color:black"><b> עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה</b></h2>
        <div><i id="instructionId" class="fa fa-volume-up"></i></div>
        <input class="myButton" id="buttonId" type="button" value="התחלה" onclick="StartGame()" />
        <input class="myButton" id="buttonRet" type="button" value="חזור לאותיות" onclick="GoToAlphabet()" />
        <h2 style="color:black"><b>  אות משחק זה היא @Model.Letter </b></h2>
    </div>
    <section id="sectionId" class="w3-display-container	">
        @*<div id="ballonContainer">
            <div id="balloonId" class="balloon"></div>
        </div>*@
        <div id="balloonId" class="balloon"></div>
    </section>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h3 style="color:green; font-size:100px; font-weight:bold" id="messageId"></h3>
        <input class="gameOverBtn, myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
    </div>
</body>
