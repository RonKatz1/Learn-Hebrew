@model LearnHebrew.Models.GameInformationModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style>
    body{
        padding-top:0px;
        background-color:darkgreen;
        padding-bottom:0px;
    }
    canvas {
        background-color:chocolate;
        position:relative;
        padding:0;
        display:block;
        margin: auto;
        width: 802px;
        height: 502px;
        border: 1px solid black;
    }
    .letter {
        position:absolute;
        /*width: 10px;
        height: 15px;*/
    }
    #endGameScreen {
        height: 50%;
    }
    .hidescreen {
        display: none;
    }
    .heart {
        opacity: 0.7;
        width: 25px;
    }
    #scoreId {
        margin-left: 15px;
        font-size: x-large;
        color: gold;
    }
    #heartDiv {
        position: absolute;
        right: 0;
        top: 0;
        float: right;
        text-align: right;
        height: 50%;
    }
    .center {
        margin-left: auto;
        margin-right: auto;
    }
    .gameOverBtn{
        margin-top:10px;
    }
    #gameOverh {
        color:gold;
        margin-top:30px;
        margin-bottom:30px;
    }
    #instructionId {
        color: gold;
        cursor: pointer;
    }
    .myButton {
        box-shadow: inset 0px 1px 0px 0px #f9eca0;
        background: linear-gradient(to bottom, #f0c911 5%, #f2ab1e 100%);
        background-color: #f0c911;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: #c92200;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
        margin-top: 10px;
        margin-bottom: 10px;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }
</style>


<body>
    <div style="text-align:center">
        <h1 style="color:gold"> הנחש הרעב </h1>
        <h2 style="color:gold"> עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתורי החיצים</h2>
        <div><i id="instructionId" class="fa fa-volume-up"></i></div>
        <input class="myButton" id="buttonRet" type="button" value="חזור לאותיות" onclick="GoToAlphabet()"/>
    </div>
    <div id="statsDiv" class="w3-display-container">
        <div id="heartDiv"></div>
        <div id="scoreDiv" class="w3-display-topleft"><p id="scoreId">0</p></div>

    </div>
    <canvas class="center" id="canvasId" >
       
        
    </canvas>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h3 id="gameOverh">ניקוד: <span id="finalScore"></span></h3>

        <input class="gameOverBtn, myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />

    </div>
</body>

<script>
    const $canvas = document.getElementById("canvasId");// the canvas
    const $ctx = $canvas.getContext("2d");// the canvas
    const box = 5;// the variable  responsible for the distance the snake makes every time he moves
    let snake = [];// array of snake bits
    let $currentLetterImg;// the variable holding the current image for the current letter
    let $currentLetter;// the variable holding the current axis x and axis y for the current letter
    let validLetters;// array of valid letter for the game, baed on the user
    let movementSpeed = 100;// the movement of the snake
    let lives = 3;// the number of chances to play the game
    const starterHeight = 5, starterWidth = 5, starterX = 30, starterY = 30;// variables for the width, height, axis x and axis y of the snake at the start of the game
    let currentDirection;// the direction of the snake
    let gameInterval;// interval variable for the game
    let letterWidth = 10, letterHeight = 10;// variables for the width and height of any letter
    $(document).ready(function () {
        //FillValidLetters();
        validLetters = ["/Pictures/Alphabet/ב1.png", "/Pictures/Alphabet/ב2.png", "/Pictures/Alphabet/ב3.png", "/Pictures/Alphabet/ב4.png", "/Pictures/Alphabet/ב5.png"];
        LoadGameInstruction();
        LoadSoundAndPicture();       
        snake.push({
            
            x: starterX,
            y: starterY
        });
        FillHearts();
        CreateFirstLetter();
        gameInterval = setInterval(draw, movementSpeed);

        $("body").keydown(userKey_Options);
    })
    // This funcion pre loads the instruction audio of the game
    function LoadGameInstruction() {
        let obj = document.createElement("audio");
        obj.src = "/Audio/Game_2/Game_2_instructions.mp3";
        obj.volume = 0.3;
        obj.autoPlay = false;
        obj.preLoad = true;
        obj.controls = true;

        $("#instructionId").click(function () {
            obj.play();
        });
    }
    // This funcion pre loads the sound and pictures of the game
    function LoadSoundAndPicture() {
        new Audio("/Audio/Game_2/snakeGrab.mp3").load();
        new Audio("/Audio/Game_2/snakeError.mp3").load();
        //this may need to be changes once games become dynamic letter based
        for (let i = 0; i < validLetters.length; i++) {
            fetch(validLetters[i]);
        }
    }
    // This function enables certain audio files at certain events
    function CreateSound(number = 10) {
        let $sound;
        if (number == 1) {//letter eaten by the snake
            $sound = new Audio("/Audio/Game_2/snakeGrab.mp3");
        }
        else {//snake lost a life
            $sound = new Audio("/Audio/Game_2/snakeError.mp3");
        }
        $sound.play();
    }
     // This funcion creates and places a new letter
    function CreateFirstLetter() {
        
        $currentLetterImg = new Image();
        let imgLetter = Math.floor((Math.random() * (validLetters.length)) + 0);
        $currentLetterImg.src = validLetters[imgLetter];
        $currentLetterImg.classList.add("letter");

        $currentLetter = {
            x: Math.floor((Math.random() * ($canvas.width - (starterWidth * 2))) + 1),
            y: Math.floor((Math.random() * ($canvas.height - (starterHeight * 2))) + 1)
        }

        // while the location of the new letter is ontop of the snake array
        while (objectCrossedSnake($currentLetter)) {
            $currentLetter = {
                x: Math.floor((Math.random() * ($canvas.width - (starterWidth * 2))) + 1),
                y: Math.floor((Math.random() * ($canvas.height - (starterHeight * 2))) + 1)
            }
        }    
    }
    // This funcion enables pressed keyboard events
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (37):// left keyboard was pressed = moving the user one move to the left
                if (currentDirection != "RIGHT") currentDirection = "LEFT";
                break;
            case (38):// up keyboard was pressed = moving the user one move  up
                if (currentDirection != "DOWN") currentDirection = "UP";
                break;
            case (39):// right keyboard was pressed = moving the user one move to the right
                if (currentDirection != "LEFT") currentDirection = "RIGHT";
                break;
            case (40):// down keyboard was pressed = moving the user one move  down
                if (currentDirection != "UP") currentDirection = "DOWN";
                break;
            

        }
    }
    // This funcion displays all images and objects on the canvas
    function draw() {
        $ctx.clearRect(0, 0, $canvas.width, $canvas.height);
        drawSnake();
        drawLetter();

        //old head position
        let snakeXOld = snake[0].x;
        let snakeYOld = snake[0].y;

        //direction
        if (currentDirection == "LEFT") snakeXOld -= box;
        if (currentDirection == "UP") snakeYOld -= box;
        if (currentDirection == "RIGHT") snakeXOld += box;
        if (currentDirection == "DOWN") snakeYOld += box;
      
        if (checkIntersection(snakeXOld, snakeYOld)) {
            $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
            if (parseInt($("#scoreId").text()) == 100){
                clearInterval(gameInterval);
                GameOver();
            }
            CreateSound(1);
            CreateFirstLetter();
        }

        else {
            //remove tail
            snake.pop();
        }


        //add new head
        let newHead = {
            x: snakeXOld,
            y: snakeYOld
        }
       

        //loss heart
        if (snakeXOld < 0 || snakeXOld > ($canvas.width - starterWidth) || snakeYOld < 0 || snakeYOld > ($canvas.height - starterHeight) || objectCrossedSnake(newHead)) {
            clearInterval(gameInterval);
            CreateSound();
            setTimeout(function () {
                lives--;
                if (lives == 0) {
                    GameOver();
                }
                else {
                    RemoveHeart();
                    currentDirection = null;
                    snake.length = 0;
                    snake.push({

                        x: starterX,
                        y: starterY
                    });
                    gameInterval = setInterval(draw, 100);
                }
            }, 500);                       
        }
        snake.unshift(newHead);
    }
     // This funcion checks if an object with axis x and axis y has crossed the snake array 
    function objectCrossedSnake(object) {
        for (let i = 0; i < snake.length; i++) {
            if (object.x == snake[i].x && object.y == snake[i].y) {
                return true;
            }
        }
        return false;
    }
    // This funcion displays snake array onto the canvas
    function drawSnake() {
        $ctx.beginPath();
        for (let i = 0; i < snake.length; i++) {
            $ctx.fillStyle = "#3FFF33";
            $ctx.fillRect(snake[i].x, snake[i].y, starterWidth, starterHeight);
        }
        $ctx.closePath();
    }
    // This funcion displays the letter onto the canvas
    function drawLetter() {
        $ctx.beginPath();
        $ctx.drawImage($currentLetterImg, $currentLetter.x, $currentLetter.y, letterWidth, letterHeight);
        $ctx.closePath();
    }
    // This funcion removes remaining hearts on screen and replaces them with an updated heart amount
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }

    // This funcion checks for a collision between the snake to a letter 
    function checkIntersection($x, $y) {//x is snake y is letter
        if ($x == undefined || $y == undefined) return false;
        xLeft = $x;
        xTop = $y;
        xRight = xLeft + starterWidth;
        xBottom = xTop + starterHeight;

        yLeft = $currentLetter.x;
        yTop = $currentLetter.y;
        yRight = yLeft + letterWidth;
        yBottom = yTop + letterHeight;

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    // This funcion sets up the game hearts (lives)
    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_2/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);

        }
    }
    // This function ends allows the player to return to "Alphabet" page
    function GameOver() {
        $canvas.classList.add("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        $("#statsDiv").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
    }
    // This function return the player to "Alphabet" page
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }


    // This function will fill dynamicly the validLetters array
    //need TO RETURN TO THIS
    function FillValidLetters() {
        @*for (let i = 0; i < @Model.ValidLetterName.Count(); i++) {
            validLetters.push(@Model.ValidLetterName[@:i]);
        }*@

        validLetters = '@Html.Raw(Json.Encode(Model.ValidLetterName))';
        @*for (let i = 0; i < @Model.ValidLetterName.Count() - 1; i++) {
            //validLetters[i] = "/Pictures/Alphabet/" + validLetters[i];
            let temp = validLetters[i];
            vvvvvvvvv.push("/Pictures/Alphabet/" + temp);
        }*@
        let i = 2;
        let temp = [];
        while (validLetters[i] != "]") {
            if (validLetters[i] != '"') {
                temp.push(validLetters[i]);
                i = i + 3;
            }
            else {
                vvvvvvvvv.push("/Pictures/Alphabet/" + temp);
                i++
                temp.length = 0;
            }
        }

    }
</script>