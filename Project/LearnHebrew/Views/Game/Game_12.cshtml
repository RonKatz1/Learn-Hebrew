@model LearnHebrew.Models.GameInformationModel
@{
    Layout = null;
}
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

<style>
    section {
        width: 58%;
        height: 64%;
        background-color: white;
        position: relative;
        margin: auto;
    }

    #user {
        width: 7%;
        height: 9%;
        top: 88%;
        left: 45%;
        position: absolute;
    }

    .enemy {
        width: 6%;
        height: 6%;
        position: absolute;
    }

    #endGameScreen {
        height: 50%;
    }

    .hidescreen {
        display: none;
    }

    body {
        background-image: url('../../Pictures/Game_12/chef_kitchen.PNG');
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .buttonClass {
        border-radius: 12px;
        color: gold;
        font-size: large;
        background-color: hotpink
    }

    #scoreId {
        top: 0%;
        left: 93%;
        position: absolute;
        font-size: x-large;
        color: gold;
    }

    #heartDiv {
        top: 0%;
        left: 3%;
        position: absolute;
    }

    .heart {
        opacity: 0.7;
        width: 25px;
    }

    #gameOverh {
        color: forestgreen;
        margin-top: 30px;
        margin-bottom: 30px;
    }
    .gameOverBtn {
        margin-top: 10px;
    }
    #instructionId {
        color: forestgreen;
        cursor: pointer;
    }

    .myButton {
        box-shadow: inset 0px 1px 0px 0px blueviolet;
        background: linear-gradient(to bottom, #f0c911 5%, blueviolet 100%);
        background-color: blueviolet;
        border-radius: 6px;
        border: 1px solid #e65f44;
        cursor: pointer;
        color: forestgreen;
        font-family: Arial;
        font-size: 15px;
        font-weight: bold;
        padding: 1px 6px;
        text-decoration: none;
        text-shadow: 0px 1px 0px #ded17c;
        margin-top: 10px;
        margin-bottom: 10px;
    }

        .myButton:hover {
            background: linear-gradient(to bottom, #f2ab1e 5%, #f0c911 100%);
            background-color: #f2ab1e;
        }
</style>
<script>
    let move = 25;// setting moving distance per move for user
    let $User;// placeholder  for the user in every new game
    let letterTime = 10000;// the time it takes a letter to remove itself
    let letterSpawnTime = 2000;// time of spawning letters
    let gameoverIndicator;// interval animation of spawning enemies
    let validLetters = [];// array of valid letter for the game, baed on the user
    let invalidLetters = [];// array of invalid letter for the game, baed on the user
    let savedBottom;// saved height of user
    let lives = 3;// the amount of times a user can play
    $(document).ready(function () {
        //LoadGameInstruction();
        FillLetters();
    })
    //This function gets the path of the selected letter images
    function FillLetters() {
        $.ajax({
            url: '/Child/GetGameLetters' + '/' + '?Letter=@Model.Letter',
            type: 'GET',
            dataType: 'json',
            error: function (e, ts, et) {
                alert("error at GetGameLetters" + ts);
            },
            success: function (data) {
                for (let i = 0; i < 5; i++)
                    validLetters.push("/Pictures/Alphabet/" + data.ValidLetterName[i]);
                for (let j = 0; j < data.InValidLetterName.length; j++)
                    invalidLetters.push("/Pictures/Alphabet/" + data.InValidLetterName[j]);
            }
        });
    }
    // This funcion sets up the game
    function StartGame() {
        $User = $("#user");//linking placeholder to user in current game
        savedBottom = parseInt($User.css("top"));
        $("body").keydown(userKey_Options);
        gameoverIndicator = setInterval(createEnemy, letterSpawnTime);
        FillHearts();
        $("#buttonId").addClass("hidescreen");
    }
    //This function enables the user movement
    function userKey_Options() {
        switch (window.event.keyCode) {
            case (37):// left keyboard was pressed = moving the user one move to the left
                MoveLeft();
                break;
            case (39):// right keyboard was pressed = moving the user one move to the right
                MoveRight();
                break;
            case (38)://up keyboard was pressed = moving the user one move up
                MoveUp();
                break;
            case (40)://down keyboard was pressed = moving the user one move down
                MoveDown();
                break;
        }
    }
    // This funcion moves the user up
    function MoveUp() {
        MoveUserAxisY(-1 * move);
    }
    // This funcion moves the user down
    function MoveDown() {
        MoveUserAxisY(move);
    }
    // This funcion moves the user left
    function MoveLeft() {
        MoveUserAxisX(-1 * move);
    }
    // This funcion moves the user right
    function MoveRight() {
        MoveUserAxisX(move);
    }
    // This funcion moves the user along the axis y if possible
    function MoveUserAxisY(axisY) {
        let currentPosition = parseInt($User.css("top"));//getting current position of user
        let newPosition = currentPosition + axisY;//calculating new position of user

        if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("height")) - parseInt($User.css("height"))))
            $User.css("top", newPosition + "px");//moving user to new position

    }
    // This funcion moves the user along the axis x if possible
    function MoveUserAxisX(axisX) {
        let currentPosition = parseInt($User.css("left"));//getting current position of user
        let newPosition = currentPosition + axisX;//calculating new position of user

        if (newPosition >= 0 && newPosition <= (parseInt($("#sectionId").css("width")) - parseInt($User.css("width"))))
            $User.css("left", newPosition + "px");//moving user to new position

    }
    // This funcion sets up the game hearts (lives)
    function FillHearts() {
        $heartDiv = $("#heartDiv");
        for (let i = 0; i < lives; i++) {
            let $image = $("<img>");
            $image.attr("src", "/Pictures/Game_12/heart.png");
            $image.addClass("heart");
            $heartDiv.append($image);
        }
    }
    // This function removes the object it was used upon
    function deleteObject() {
        $(this).remove();
    }
    // This funcion creates  a letter image
    function createEnemy() {

        let $enemy = $("<img>");
        let enemyType = Math.floor((Math.random() * 10) + 1);
        let randomNumber;
        if (enemyType > 3) {
            randomNumber = Math.floor((Math.random() * validLetters.length) + 0);
            $enemy.attr("src", validLetters[randomNumber]);

        }
        else {
            randomNumber = Math.floor((Math.random() * invalidLetters.length) + 0);
            $enemy.attr("src", invalidLetters[randomNumber]);
        }
        $enemy.addClass("enemy");
        let axisX = randomEnemyAxisX();
        let axisY = randomEnemyAxisY();
        $enemy.css("top", axisY + "px");
        $enemy.css("left", axisX + "px");

        $("section").append($enemy);

        $enemy.animate({
            opacity:0.4

        }, {
                duration: letterTime,
                easing: "linear",
                progress: collisionCheck,
                complete: deleteObject

            });

    }
    // This function returns a random axis x location on the section
    function randomEnemyAxisX() {
        let limitLeft = (parseInt($User.css("width")) / 4);//floot
        let limitRight = parseInt($("section").css("width")) - (parseInt($User.css("width")));
        return Math.floor((Math.random() * limitRight) + limitLeft);
    }
    // This function returns a random axis y location on the section
    function randomEnemyAxisY() {
        let limitUp = ((parseInt($("section").css("top")) + (parseInt($User.css("height"))/4)));//floot
        let limitDown = savedBottom - (parseInt($User.css("height")));
        return Math.floor((Math.random() * limitDown) + limitUp);
    }
    // This funcion checks for a collision between the user to any letter
    function collisionCheck() {
        let $enemy = $(this);//getting the current enemy
        if (checkIntersection($User, $enemy)) {
            enemyDestroyed($enemy);
            MouthAnimation();

            $enemy.stop();
            $enemy.remove();
        }
    }
    // This function animates the user image
    function MouthAnimation() {
        $User.attr("src", "/Pictures/Game_12/mouth_closed.png");
        setTimeout(function () { $User.attr("src", "/Pictures/Game_12/mouth.png"); }, 1000);
    }
    // This funcion checks for a collision between two objects
    function checkIntersection($x, $y) {
        if ($x == undefined || $y == undefined) return false;
        xLeft = parseInt($x.css("left"));
        xTop = parseInt($x.css("top"));
        xRight = xLeft + parseInt($x.css("width"));
        xBottom = xTop + parseInt($x.css("height"));

        yLeft = parseInt($y.css("left"));
        yTop = parseInt($y.css("top"));
        yRight = yLeft + parseInt($y.css("width"));
        yBottom = yTop + parseInt($y.css("height"));

        return ((xLeft >= yLeft && xLeft <= yRight || yLeft >= xLeft && yLeft <= xRight) && (xTop <= yBottom && xTop >= yTop || yTop <= xBottom && yTop >= xTop));
    }
    // This funcion decides wahat to do after a letter has collided  with the user
    function enemyDestroyed($enemy) {
        let indicator = false;
        CreateSound();
        for (let i = 0; i < validLetters.length; i++) {
            if ($enemy.attr('src') == validLetters[i]) {
                $("#scoreId").text(parseInt($("#scoreId").text()) + 1);
                indicator = true;
                break;
            }
        }
        if (!indicator) {
            lives--;
            RemoveHeart();
        }
        if (lives == '0') {
            GameOver();
        }
    }
    // This funcion removes remaining hearts on screen and replaces them with an updated heart amount
    function RemoveHeart() {
        $("#heartDiv").empty();
        FillHearts();
    }
    // This funcion creates "eating" sound
    function CreateSound() {
        let $sound = $("<audio>");
        $sound.attr("src", "/Audio/Game_12/eat.mp3");
        $sound[0].play();
    }
    // This function ends all intervals of the game and allows the player to return to "Alphabet" page
    function GameOver() {
        clearInterval(gameoverIndicator);
        $("#sectionId").addClass("hidescreen");
        $("#buttonRet").addClass("hidescreen");
        $("#finalScore").text($("#scoreId").text());
        $("#endGameScreen").removeClass("hidescreen");
    }
    // This function return the player to "Alphabet" page
    function GoToAlphabet() {
         window.location.href = "@(Url.Action("ReturnToAlphabet", "Child"))";
    }
</script>

<body>
    <div style="text-align:center">
        <h1 style="color:forestgreen"> אכילת אותיות </h1>
        <h2 style="color:forestgreen">עבור שמיעת הוראות המשחק לחץ על סימן השמיעה למטה, להתחלת המשחק לחץ על כפתור התחלה</h2>
        <div><i id="instructionId" class="fa fa-volume-up"></i></div>
        <h2 style="color:green"><b>  אות משחק זה היא @Model.Letter </b></h2>
        <input id="buttonId" class="myButton" type="button" value="התחלה" onclick="StartGame()" />
        <input id="buttonRet" class="myButton" type="button" value="חזור לאותיות" onclick="GoToAlphabet()" />
    </div>
    <section id="sectionId">
        <div id="heartDiv"></div>
        <p id="scoreId">0</p>
        <img id="user" src="~/Pictures/Game_12/mouth.png" />
    </section>
    <div style="z-index:90;text-align:center" id="endGameScreen" class="hidescreen">
        <h3 id="gameOverh">ניקוד: <span id="finalScore"></span></h3>
        <input class="gameOverBtn, myButton" type="button" value="חזרה לעמוד אותיות" onclick="GoToAlphabet()" />
    </div>

</body>